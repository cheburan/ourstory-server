{"version":3,"sources":["components/VideoPlayer.js","components/chunk-list/ChunkItem.js","components/chunk-list/ChunkList.js","components/contrib-editor/ContribEditor.js","pages/edit/TranscribeEditor.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","position","paddingTop","width","height","video","top","left","bottom","right","zIndex","VideoPlayer","props","time","src","videoRef","React","useRef","classes","useEffect","seconds","timestamp","isNaN","match","Error","hours","parseInt","minutes","milliseconds","toMS","current","currentTime","Box","className","ref","controls","autoPlay","theme","createStyles","padding","spacing","margin","backgroundColor","focused","minWidth","cursor","textArea","ChunkItem","chunk","onUpdate","contribution","onClick","onActive","inputRef","useState","content","setContent","starttime","endtime","title","handleSubmit","e","preventDefault","Card","CardHeader","titleTypographyProps","variant","CardContent","action","onSubmit","onBlur","TextField","label","multiline","rows","placeholder","value","onKeyPress","key","blur","onFocus","onChange","target","display","flexDirection","overflow","ChunkList","user","chunks","activeIndex","onSelect","map","index","contribId","contributions","findIndex","text","chunkId","editor","box","maxHeight","TranscribeEditor","startTime","setStartTime","focus","setFocus","Container","fixed","marginTop","Paper","Grid","container","item","xs","nextChunks","App","id","window","location","href","split","parsed","queryString","parse","search","apikey","name","transcriptionUri","updateRequestUri","data","setData","fetch","then","response","json","result","catch","err","console","error","get","Fragment","CssBaseline","nextData","transcription","body","JSON","stringify","log","method","headers","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97fe4fc5.chunk.js","sourcesContent":["import React from 'react';\nimport { Box } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root:{\n    position: 'relative',\n    paddingTop: '56.25%',\n    width: '100%',\n    height: 0,\n\n  },\n  video:{\n    position: 'absolute',\n    top:0,\n    left:0,\n    bottom:0,\n    right:0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n  },\n})\n\nexport default function VideoPlayer(props){\n  const {time, src} = props;\n  const videoRef = React.useRef(null);\n  const classes = useStyles();\n\n  React.useEffect(()=>{\n    const seconds = toMS(time)/1000;\n    if(seconds > 0){\n      videoRef.current.currentTime = seconds\n    }\n  }, [time]);\n\n\n  return (\n    <Box className={classes.root}>\n      <video className={classes.video} ref={videoRef} src={src} controls autoPlay={false}/>\n    </Box>\n  )\n}\n\n\nfunction toMS (timestamp) {\n  if (!isNaN(timestamp)) {\n    return timestamp\n  }\n\n  const match = timestamp.match(/^(?:(\\d{2,}):)?(\\d{2}):(\\d{2})[,.](\\d{3})$/)\n\n  if (!match) {\n    throw new Error('Invalid SRT or VTT time format: \"' + timestamp + '\"')\n  }\n\n  const hours = match[1] ? parseInt(match[1], 10) * 3600000 : 0\n  const minutes = parseInt(match[2], 10) * 60000\n  const seconds = parseInt(match[3], 10) * 1000\n  const milliseconds = parseInt(match[4], 10)\n\n  return hours + minutes + seconds + milliseconds\n}\n","import React from 'react';\nimport {Card, CardHeader, CardContent, Typography, TextField} from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme)=>createStyles({\n  root: (props)=>({\n    padding: theme.spacing(1),\n    margin: theme.spacing(0,1),\n    backgroundColor: props.focused ? \"#f0f0f0\" : '#FFF',\n    minWidth: 480,\n    cursor: \"pointer\",\n  }),\n  textArea:{\n    width: '100%',\n  }\n}))\n\ntype ChunkItemProps = {\n  chunk: Chunk,\n  constribution: Object,\n  focused: boolean,\n  onClick: ()=>void,\n  onUpdate: ()=>void,\n}\n\nexport default function ChunkItem(props : ChunkItemProps){\n  const { chunk, contribution, onClick, onUpdate, onActive } = props;\n  const inputRef = React.useRef(null);\n  const [content, setContent] = React.useState(props.content);\n  const classes = useStyles(props);\n  const {starttime, endtime} = chunk;\n  const title = `${starttime} - ${endtime}`\n\n  const handleSubmit = (e)=>{\n    e.preventDefault();\n    onUpdate(content);\n  }\n\n  const handleKeyPress = (e)=>{\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      inputRef.current.blur();\n      onUpdate(content);\n    }\n  }\n\n  return (\n    <Card className={classes.root} onClick={()=>onActive()}>\n      <CardHeader\n        title={title}\n        titleTypographyProps={{variant: 'h6'}}/>\n      <CardContent>\n        <form action=\"#\" onSubmit={handleSubmit} onBlur={handleSubmit} >\n          <TextField\n            inputRef={inputRef}\n            className={classes.textArea}\n            label=\"Subtitle\"\n            multiline\n            rows=\"3\"\n            placeholder=\"Please input your transcription\"\n            value={content}\n\n            onKeyPress={handleKeyPress}\n            onFocus={()=>onActive()}\n            onChange={(e)=>setContent(e.target.value)}/>\n        </form>\n\n        {/* <textarea value={content} onChange={(e)=>setContent(e.target.value)}/> */}\n\n        {/* <Typography gutterBottom>\n          {contribution && contribution.text}\n        </Typography> */}\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport ChunkItem from './ChunkItem';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme)=>createStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    overflow: \"scroll\",\n    padding: theme.spacing(2,1),\n  }\n}))\n\nexport default function ChunkList(props){\n  const { user, chunks, activeIndex, onSelect } = props;\n  const classes = useStyles(props);\n  return (\n    <div className={classes.root}>\n      {chunks.map((chunk, index)=>{\n        const contributions = chunk.contributions || [];\n        const contribId = contributions.findIndex(contribution=>contribution.user === user);\n        const contribution = contribId < 0 ? null : chunk.contributions[contribId];\n        const content = contribution ? contribution.text : \"\";\n        return (\n          <ChunkItem\n            key={index}\n            chunk={chunk}\n            focused={activeIndex === index}\n            content={content}\n            onUpdate={(content)=>props.onUpdate({chunkId: index, contribId, content}) }\n            onActive={()=>props.onSelect(index)}/>\n        );\n      })}\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button,\n  CardActions} from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme)=>createStyles({\n  root:{\n    margin: theme.spacing(3,0),\n  },\n  editor:{\n    width: \"100%\",\n  }\n}));\n\nexport default function ChunkEditor(props){\n  const classes = useStyles();\n  const { title, chunk, contrib } = props;\n  const [data, setData] = React.useState(contrib);\n\n  const updateField = (field, value)=>{\n    setData({...data, [field]:value});\n  }\n\n  const handleSubmit = (e)=>{\n    props.onSubmit(data);\n  }\n\n  const handleCancel = (e)=>{\n    props.onCancel();\n  }\n\n  const {starttime, endtime} = chunk;\n  const subheader = `${starttime} - ${endtime}`\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        title={title}\n        titleTypographyProps={{variant: 'body1'}}\n        subheader={subheader}/>\n\n      <CardContent>\n        <TextField\n          className={classes.editor}\n          label=\"Subtitle\"\n          multiline\n          rows=\"2\"\n          value={data.text}\n          onChange={(e)=>updateField('text', e.target.value)}\n          variant=\"outlined\"/>\n      </CardContent>\n\n      <CardActions>\n        <Button\n          onClick={handleCancel}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={handleSubmit}\n          color=\"primary\">\n          Submit\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n","import React from 'react';\nimport {Box, Container, Grid, Paper} from '@material-ui/core'\nimport VideoPlayer from 'components/VideoPlayer';\nimport ChunkList from 'components/chunk-list';\nimport ContribEditor from 'components/contrib-editor';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\n\n\nconst useStyles = makeStyles((theme: Theme)=>createStyles({\n  box:{\n    maxHeight: 600,\n    overflow: 'auto'\n  }\n}))\n\n\nexport default function TranscribeEditor(props){\n  const { src, user, chunks, onUpdate} = props;\n  const classes = useStyles();\n  const [ selection, setSelection ] = React.useState(null);\n  const [ startTime, setStartTime] = React.useState(0);\n  const [ focus, setFocus] = React.useState(null);\n\n  const handleSelect = (chunkId)=>{\n    const chunk = chunks[chunkId];\n    setFocus(chunkId);\n    setStartTime(chunk.starttime);\n  }\n\n  const handleUpdate = ({chunkId, contribId, content})=>{\n    const contributions = contribId < 0 ?\n      [...chunks[chunkId].contributions || [], {user, text:content}] :\n      chunks[chunkId].contributions.map((contribution,index)=>(index ===contribId ? {...contribution, text:content} : contribution));\n    const nextChunks = chunks.map((chunk, index)=>(index === chunkId) ? {...chunk, contributions} : chunk)\n    onUpdate(nextChunks);\n  }\n\n\n  return (\n    <Container fixed>\n      <Box marginTop={3}>\n        <Paper>\n          <Grid container spacing={4}>\n            <Grid item xs={3}/>\n            <Grid item xs={6}>\n              <Box className={classes.box}>\n                <VideoPlayer time={startTime} src={src} />\n              </Box>\n            </Grid>\n            <Grid item xs={3}/>\n          </Grid>\n        </Paper>\n      </Box>\n\n      <Box marginTop={3}>\n        <ChunkList\n          user={user}\n          chunks={chunks}\n          activeIndex={focus}\n          onUpdate={handleUpdate}\n          onSelect={handleSelect}/>\n      </Box>\n\n    </Container>\n  )\n}\n","import React from 'react';\nimport get from 'lodash/get';\nimport TranscribeEditor from 'pages/edit';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport queryString from \"query-string\";\n\n\nfunction App() {\n  // const id = \"123\";\n  // const apikey = \"23123\";\n\n  const id = window.location.href.split('/')[5].split('?')[0];\n  // const apikey = window.location.href.split('apikey=')[1];\n\n  const parsed = queryString.parse(window.location.search);\n  \n  const apikey = parsed.apikey;\n  const user = parsed.name;\n\n  // const src = \"http://media.w3.org/2010/05/bunny/movie.mp4\";\n  const src = `/api/watch/getvideo/${id}`;\n  // const transcriptionUri = '/example.json';\n  const transcriptionUri = `/api/watch/edit/${id}`;\n  const updateRequestUri = `/api/watch/savedit/${id}?apikey=${apikey}`;\n\n  const [ data, setData ] = React.useState({});\n\n  // load data\n  React.useEffect(()=>{\n    fetch(transcriptionUri)\n    .then((response)=>{\n      return response.json();\n    })\n    .then((result)=>{\n      setData(result);\n    })\n    .catch((err)=>{\n      console.error(err);\n    })\n  },[]);\n\n  // update data\n  const handleUpdate = (chunks)=>{\n    const nextData = {...data, transcription: {...data.transcription, chunks}}\n    setData(nextData);\n\n    const body = JSON.stringify(nextData);\n    console.log(body)\n    fetch(updateRequestUri, {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: body,\n    })\n    .then((response)=>{\n      return response;\n    })\n    .catch((err)=>{\n      console.error(err);\n    })\n  }\n\n  const chunks = get(data, ['transcription','chunks'], []);\n  return (\n    <React.Fragment>\n      <CssBaseline/>\n      <TranscribeEditor\n        chunks={chunks}\n        onUpdate={handleUpdate}\n        src={src}\n        user={user}/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}