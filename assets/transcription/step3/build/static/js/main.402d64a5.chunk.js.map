{"version":3,"sources":["components/videoPopup.jsx","components/transcriptionScroll.jsx","App.js","serviceWorker.js","index.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","aria-label","onClick","DialogContent","MuiDialogContent","VideoPopup","videoClip","open","currentPlayer","starttime","endtime","startSecond","toSecond","endSecond","setInterval","play","currentTime","getState","player","seek","Dialog","aria-labelledby","id","index","size","dividers","style","width","height","ref","src","clickable","autoHide","timestamp","isNaN","match","Error","parseInt","TranscriptionScroll","context","handleVideoPlay","chunk","original","state","chunkIndex","transcription","chunks","findIndex","c","setState","videoOpen","length","handleConfirm","event","contributions","contributionIndex","annotations","selected","parentRow","target","parentNode","contributionRow","console","log","currentTarget","doneReview","text","getElementsByTagName","value","adoptedContribution","reviewedBy","reviewer","reviewedAt","Date","toLocaleString","saveEdit","handleTextClick","contribution","attempted","indexOf","forEach","handleClose","handleVideoClose","generateCardColor","generateCardTextColor","display","displayCard","generateDisable","disabled","formatCardHeader","split","this","serverRequest","axios","get","then","result","data","bind","post","apikey","Fragment","map","Card","bg","Header","fontWeight","Body","Container","Row","Col","xs","user","toUpperCase","TextField","defaultValue","fontSize","e","textAlign","Popover","undefined","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","Component","window","location","href","parsed","queryString","parse","search","name","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.402d64a5.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Player, BigPlayButton, ControlBar, Shortcut } from \"video-react\";\n\nconst styles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst DialogTitle = withStyles(styles)(props => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}))(MuiDialogContent);\n\nexport default function VideoPopup(props) {\n  const { videoClip, open } = props;\n  let currentPlayer = null;\n\n  if (videoClip.starttime && videoClip.endtime) {\n    const startSecond = toSecond(videoClip.starttime);\n    const endSecond = toSecond(videoClip.endtime);\n\n    setInterval(() => {\n      if (currentPlayer !== null) {\n        currentPlayer.play();\n\n        const { player } = currentPlayer.getState();\n        const currentTime = player.currentTime;\n        // console.log(currentTime);\n\n        if (currentTime <= startSecond || currentTime >= endSecond)\n          currentPlayer.seek(startSecond);\n      }\n    }, 200);\n  }\n\n  return (\n    <div>\n      <Dialog\n        onClose={props.onClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={props.onClose}>\n          {\"Video Segment \" + videoClip.index + \"/\" + videoClip.size}\n        </DialogTitle>\n\n        <DialogContent dividers style={{ width: \"600px\", height: \"400px\" }}>\n          <Player\n            ref={player => {\n              currentPlayer = player;\n            }}\n          >\n            <source src={props.src} />\n            <BigPlayButton position=\"center\" />\n            <Shortcut clickable={true} />\n            <ControlBar autoHide={false} />\n          </Player>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nVideoPopup.propTypes = {\n  open: PropTypes.bool.isRequired,\n  videoClip: PropTypes.bool.isRequired\n};\n\nfunction toSecond(timestamp) {\n  if (!isNaN(timestamp)) {\n    return timestamp;\n  }\n\n  const match = timestamp.match(/^(?:(\\d{2,}):)?(\\d{2}):(\\d{2})[,.](\\d{3})$/);\n\n  if (!match) {\n    throw new Error('Invalid SRT or VTT time format: \"' + timestamp + '\"');\n  }\n\n  const hours = match[1] ? parseInt(match[1], 10) * 3600000 : 0;\n  const minutes = parseInt(match[2], 10) * 60000;\n  const seconds = parseInt(match[3], 10) * 1000;\n  const milliseconds = parseInt(match[4], 10);\n\n  return (hours + minutes + seconds + milliseconds) / 1000;\n}\n","import React, { Component } from \"react\";\nimport FreeScrollBar from \"react-free-scrollbar\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport Popover from \"@material-ui/core/Popover\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\nimport axios from \"axios\";\nimport VideoPopup from \"./videoPopup\";\n// import transcription from \"../../src/example.json\";\n\nexport default class TranscriptionScroll extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      original: {\n        transcription: {\n          chunks: []\n        }\n      },\n      open: false,\n      videoOpen: false,\n      currentTarget: null,\n      videoClip: {}\n    };\n  }\n\n  componentDidMount() {\n    this.serverRequest = axios.get(\"/api/watch/edit/\" + this.props.id).then(\n      function(result) {\n        if (!result.data.transcription) {\n          result.data.transcription = {\n            chunks: []\n          };\n        }\n\n        result.data.transcription.chunks.forEach(chunk => {\n          if (!chunk.contributions) chunk.contributions = [];\n\n          chunk.contributions.forEach(contribution => {\n            if (!contribution.annotations) contribution.annotations = [];\n          })\n        })\n\n        this.setState({ original: result.data });\n      }.bind(this)\n    );\n  }\n\n  saveEdit() {\n    axios\n      .post(\n        \"/api/watch/savedit/\" + this.props.id + \"?apikey=\" + this.props.apikey,\n        this.state.original\n      )\n      .then(function(result) {\n        console.log(result);\n      });\n  }\n\n  handleVideoPlay = chunk => {\n    // Play the current video chunk\n    const starttime = chunk.starttime;\n    const endtime = chunk.endtime;\n\n    // Get the chunk index\n    let { original } = this.state;\n    let chunkIndex = original.transcription.chunks.findIndex(\n      c => c.starttime === starttime\n    );\n\n    this.setState({\n      videoOpen: true,\n      videoClip: {\n        index: ++chunkIndex,\n        size: original.transcription.chunks.length,\n        starttime: starttime,\n        endtime: endtime\n      }\n    });\n  };\n\n  handleConfirm = (event, chunk) => {\n    // Get the chunk clicked\n    let { original } = this.state;\n    let chunkIndex = original.transcription.chunks.findIndex(\n      c => c.starttime === chunk.starttime\n    );\n\n    // Get the contributor selected\n    let contributions = original.transcription.chunks[chunkIndex].contributions;\n    let contributionIndex = contributions.findIndex(\n      c => c.annotations.selected === true\n    );\n\n    // Update the text from the contributor selected\n    let parentRow =\n      event.target.parentNode.parentNode.parentNode.parentNode.parentNode;\n    if (parentRow.className !== \"row\") parentRow = parentRow.parentNode;\n\n    const contributionRow = parentRow.children[0].children[contributionIndex];\n\n    // If no contribution row selected, inform the user to pick a contribution first\n    if (!contributionRow) {\n      console.log(\"Pick a contribution first...\");\n      return this.setState({ open: true, currentTarget: event.currentTarget });\n    }\n\n    original.transcription.chunks[chunkIndex].doneReview = true;\n\n    // Otherwise, set the adopted contribution details with the new text retrieved\n    const text = contributionRow.getElementsByTagName(\"input\")[0].value;\n    var adoptedContribution = { ...contributions[contributionIndex] };\n    adoptedContribution.text = text;\n    adoptedContribution.reviewedBy = this.props.reviewer;\n    adoptedContribution.reviewedAt = new Date().toLocaleString(\"en-US\");\n\n    original.transcription.chunks[\n      chunkIndex\n    ].adoptedContribution = adoptedContribution;\n    console.log(original.transcription);\n\n    this.setState({ original });\n    this.saveEdit();\n  };\n\n  handleTextClick = (chunk, contribution) => {\n    // Get the chunk clicked\n    let { original } = this.state;\n    let chunkIndex = original.transcription.chunks.findIndex(\n      c => c.starttime === chunk.starttime\n    );\n    // Modify the chunk to be attempted\n    original.transcription.chunks[chunkIndex].attempted = true;\n\n    // Get the contribution index\n    let contributions = original.transcription.chunks[chunkIndex].contributions;\n    let contributionIndex = contributions.indexOf(contribution);\n\n    // Update the selected contributor\n    contributions.forEach(contribution => {\n      contribution.annotations.selected = false;\n    });\n    contributions[contributionIndex].annotations.selected = true;\n    original.transcription.chunks[chunkIndex].contributions = contributions;\n\n    // console.log(\"Chunk Index: \", chunkIndex);\n    // console.log(\"Contribution Index: \", contributionIndex);\n    // console.log(\"Contributions: \", contributions);\n\n    // Update the state\n    this.setState({ original });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleVideoClose = () => {\n    this.setState({ videoOpen: false });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Video Transcription Review</h1>\n        <br />\n\n        <div style={{ width: \"100%\", height: \"90vh\" }}>\n          <FreeScrollBar>\n            {this.state.original.transcription.chunks.map(chunk => (\n              <div>\n                <Card\n                  bg={this.generateCardColor(chunk)}\n                  text={this.generateCardTextColor(chunk)}\n                  style={{ width: \"95%\" }}\n                >\n                  <Card.Header style={{ fontWeight: \"bold\" }}>\n                    {this.formatCardHeader(chunk)}\n                  </Card.Header>\n                  <Card.Body>\n                    <Container>\n                      <Row>\n                        <Col>\n                          {chunk.contributions.map(contribution => (\n                            <div>\n                              <Row>\n                                <Col\n                                  xs={2}\n                                  style={{\n                                    fontWeight: \"bold\",\n                                    color: this.display(chunk)\n                                  }}\n                                >\n                                  {contribution.user.toUpperCase()}\n                                </Col>\n                                <Col>\n                                  <div\n                                    style={{\n                                      display: this.display(chunk, contribution)\n                                    }}\n                                  >\n                                    <TextField\n                                      {...this.generateDisable(contribution)}\n                                      defaultValue={contribution.text}\n                                      style={{ width: \"95%\" }}\n                                      onClick={() =>\n                                        this.handleTextClick(\n                                          chunk,\n                                          contribution\n                                        )\n                                      }\n                                    />\n                                  </div>\n                                </Col>\n                              </Row>\n                              <br />\n                            </div>\n                          ))}\n                        </Col>\n                        <Col xs={2}>\n                          <div className=\"text-center\">\n                            <IconButton aria-label=\"doneButton\">\n                              <CheckCircleOutlineIcon\n                                style={{\n                                  fontSize: 40,\n                                  color: \"green\"\n                                }}\n                                onClick={e => this.handleConfirm(e, chunk)}\n                              />\n                            </IconButton>\n                            <h6 style={{ textAlign: \"center\" }}>Done</h6>\n\n                            <IconButton aria-label=\"playButton\">\n                              <PlayCircleOutlineIcon\n                                color=\"primary\"\n                                style={{ fontSize: 40 }}\n                                onClick={() => this.handleVideoPlay(chunk)}\n                              />\n                            </IconButton>\n                            <h6 style={{ textAlign: \"center\" }}>\n                              Play Segment\n                            </h6>\n                          </div>\n                        </Col>\n                      </Row>\n                    </Container>\n                  </Card.Body>\n                </Card>\n                <br />\n              </div>\n            ))}\n          </FreeScrollBar>\n\n          <Popover\n            id={this.state.open ? \"simple-popover\" : undefined}\n            open={this.state.open}\n            anchorEl={this.state.currentTarget}\n            onClose={this.handleClose}\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"center\"\n            }}\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"center\"\n            }}\n          >\n            <h6 style={{ padding: \"1em\" }}>\n              Please select a contribution before submission!\n            </h6>\n          </Popover>\n\n          <VideoPopup\n            open={this.state.videoOpen}\n            src={this.props.src}\n            videoClip={this.state.videoClip}\n            onClose={this.handleVideoClose}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  generateCardColor = chunk => {\n    return chunk.doneReview ? \"success\" : \"core\";\n  };\n\n  generateCardTextColor = chunk => {\n    return chunk.doneReview ? \"white\" : \"black\";\n  };\n\n  display = (chunk, contribution) => {\n    if (!contribution) {\n      if (!chunk.attempted) return \"black\";\n      return chunk.doneReview ? \"#52a451\" : \"white\";\n    } else {\n      if (!chunk.attempted) return \"block\";\n      return contribution.annotations.selected ? \"block\" : \"none\";\n    }\n  };\n\n  displayCard = chunk => {\n    return chunk.doneReview ? \"none\" : \"block\";\n  };\n\n  generateDisable = contribution => {\n    if (!contribution.annotations.selected) {\n      contribution.annotations.selected = false;\n      return { disabled: \"disabled\" };\n    }\n    return {};\n  };\n\n  formatCardHeader = chunk => {\n    const { original } = this.state;\n    let index = original.transcription.chunks.findIndex(\n      c => c.starttime === chunk.starttime\n    );\n    const length = original.transcription.chunks.length;\n    const starttime = chunk.starttime.split(\",\")[0];\n    const endtime = chunk.endtime.split(\",\")[0];\n\n    return (\n      ++index +\n      \"/\" +\n      length +\n      \"\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\" +\n      starttime +\n      \" ~ \" +\n      endtime\n    );\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport TranscriptionScroll from \"./components/transcriptionScroll\";\nimport queryString from \"query-string\";\n\nconst sources = {\n  bunnyTrailer: \"http://media.w3.org/2010/05/bunny/trailer.mp4\",\n  bunnyMovie: \"http://media.w3.org/2010/05/bunny/movie.mp4\"\n};\n\nconst id = window.location.href.split(\"/\")[5].split(\"?\")[0];\n// const apikey = window.location.href.split(\"apikey=\")[1];\n// const reviewer = \"PeterChen\";\n\nconst parsed = queryString.parse(window.location.search);\n\nconst apikey = parsed.apikey;\nconst reviewer = parsed.name;\n\nfunction App() {\n  return (\n    <main className=\"container mt-3\">\n      <TranscriptionScroll\n        // src={sources.bunnyMovie}\n        reviewer={reviewer}\n        src={\"/api/watch/getvideo/\" + id}\n        id={id}\n        apikey={apikey}\n      ></TranscriptionScroll>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"video-react/dist/video-react.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}