{"version":3,"sources":["components/lineGrid.jsx","components/popupDialog.jsx","components/videoPlayer.jsx","App.js","serviceWorker.js","index.js"],"names":["timeFormatter","time","secs","result","withStyles","root","display","flexWrap","justifyContent","overflow","gridList","transform","spacing","titleBar","background","props","classes","chunks","myRef","useRef","className","ref","style","width","map","chunk","Card","onClick","onPlay","starttime","margin","CardActionArea","CardContent","endtime","CardActions","disableSpacing","Button","size","color","PlayArrow","onDelete","Cancel","styles","avatar","backgroundColor","blue","open","options","Dialog","onClose","aria-labelledby","List","option","ListItem","button","key","ListItemAvatar","Avatar","index","generateIcon","indexOf","ListItemText","primary","VideoPlayer","context","handlePlay","player","seek","play","skipBack","getState","currentTime","backButton","window","history","back","handleDelete","original","state","originalchunks","transcription","filter","c","findIndex","setState","saveEdit","handleClickOpen","handleConfirm","handleClose","value","closeError","erroropen","source","src","this","subscribeToStateChange","handleStateChange","bind","serverRequest","axios","get","id","then","data","forEach","toMS","console","log","toSrt","post","apikey","newChunk","splice","slice","push","position","right","top","Container","maxWidth","clickable","autoHide","Fab","aria-label","left","ArrowBack","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","Component","timestamp","isNaN","match","Error","parseInt","duration","milliseconds","parseFloat","seconds","Math","floor","minutes","hours","App","location","href","split","CssBaseline","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.253e5551.chunk.js","sourcesContent":["import React, { Component, useRef, useEffect } from 'react';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Cancel,PlayArrow} from \"@material-ui/icons\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport {CardActionArea,CardActions, Button} from '@material-ui/core';\n\nconst styles = {\n  root: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\"\n  },\n  gridList: {\n    flexWrap: \"nowrap\",\n    transform: \"translateZ(0)\",\n    spacing: 10\n  },\n  titleBar: {\n    background:\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n  }\n};\n\nconst scrollToRef = (ref) => ref.scrollLeft(ref.offsetLeft)  \n\nfunction SingleLineGridList(props) {\n  const { classes, chunks } = props;\n\n  const myRef = useRef(null)\n  // const executeScroll = () => scrollToRef(myRef)\n\n  return (\n    <div className={classes.root}>\n      {/* <GridList className={classes.gridList} cols={3}> */}\n      <div ref={myRef} style={{'overflowX':'auto', width:'100%','whiteSpace': 'nowrap'}}>\n        {chunks.map(chunk => (\n          // <GridListTile\n            \n            // key={chunk.starttime} >\n          <Card onClick={() => props.onPlay(chunk.starttime)} style={{display:'inline-block',margin:'0.2em'}}>\n            <CardActionArea>\n            <CardContent>\n              <h2 style={{'textAlign':'center'}}>\n              {timeFormatter(chunk.starttime)} - {timeFormatter(chunk.endtime)}\n              </h2>\n            </CardContent>\n            </CardActionArea>\n            <CardActions disableSpacing={true}>\n            <Button size=\"small\" color=\"primary\" onClick={() =>\n                  props.onPlay(chunk.starttime)\n                }>\n              <PlayArrow />\n                \n                </Button>\n            <Button size=\"small\" color=\"primary\" onClick={() =>\n                  props.onDelete(chunk.starttime, chunk.endtime)\n                }>\n              <Cancel />\n                \n                </Button>\n      </CardActions>\n          </Card>\n          // </GridListTile>\n\n          // <GridListTile\n          //   onClick={() => props.onPlay(chunk.starttime)}\n          //   key={chunk.starttime} >\n          //   <img src={chunk.img} alt={chunk.starttime} />\n\n          //   {/* <VideoThumbnail\n          //   crossorigin=\"anonymous\"\n          //   videoUrl=\"http://media.w3.org/2010/05/bunny/movie.mp4\"\n          //   thumbnailHandler={(thumbnail) => console.log(thumbnail)}\n          //   snapshotAtTime={chunk.starttime}\n          //   cors={true}\n          //   width={120}\n          //   height={80}\n          //   /> */}\n\n          //   <GridListTileBar\n          //     title={\n          //       timeFormatter(chunk.starttime) +\n          //       \" - \" +\n          //       timeFormatter(chunk.endtime)\n          //     }\n          //     classes={{\n          //       root: classes.titleBar\n          //     }}\n          //     actionIcon={\n          //       <IconButton aria-label={`star ${chunk.starttime}`} onClick={() =>\n          //         props.onDelete(chunk.starttime, chunk.endtime)\n          //       }>\n          //         <CancelIcon\n                    \n          //         />\n          //       </IconButton>\n          //     }\n          //   />\n          // </GridListTile>\n        ))}\n        </div>\n      {/* </GridList> */}\n    </div>\n  );\n}\n\nfunction timeFormatter(time) {\n  var mins = ~~((time % 3600) / 60);\n  var secs = ~~time % 60;\n  var result = \"\";\n  result += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n  result += \"\" + secs;\n  return result;\n}\n\nSingleLineGridList.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SingleLineGridList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { blue } from \"@material-ui/core/colors\";\n\nconst styles = {\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600]\n  }\n};\n\nfunction PopupDialog(props) {\n  const { classes, open, options } = props;\n\n  return (\n    <Dialog\n      onClose={props.onClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <List>\n        {options.map(option => (\n          <ListItem button onClick={() => props.onClose(option)} key={option}>\n            <ListItemAvatar>\n              <Avatar className={classes.avatar}>\n                {generateIcon(options.indexOf(option))}\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={option} />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  );\n}\n\nfunction generateIcon(index) {\n  switch (index) {\n    case 0:\n      return <SkipPreviousIcon></SkipPreviousIcon>;\n    case 1:\n      return <AddCircleIcon></AddCircleIcon>;\n    case 2:\n      return <CancelIcon></CancelIcon>;\n    default:\n      break;\n  }\n}\n\nPopupDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n\nexport default withStyles(styles)(PopupDialog);\n","import React, { Component } from \"react\";\nimport { Player, BigPlayButton, ControlBar, Shortcut } from \"video-react\";\nimport SingleLineGridList from \"./lineGrid\";\nimport PopupDialog from \"./popupDialog\";\nimport axios from 'axios';\nimport {Button,Container} from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Replay5 from '@material-ui/icons/Replay5';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ReactDOM from 'react-dom'\nimport { ArrowBack } from \"@material-ui/icons\";\n\nexport default class VideoPlayer extends Component {\n  \n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      original: {\n        transcription:{\n          chunks:[]\n        }\n      },\n      source: props.src,\n      open: false,\n      options: [\"Backward 2 Seconds\", \"Add New Breakpoint\", \"Discard Setting\"],\n      erroropen: false\n    };\n\n    \n  }\n\n  componentDidMount() {\n    // Subscribe state change\n    this.player.subscribeToStateChange(this.handleStateChange.bind(this));\n\n      this.serverRequest = axios.get('/api/watch/edit/'+this.props.id).then(function (result) {\n        // var lastGist = result[0];\n        // console.log(result);\n\n        if (!result.data.transcription)\n        {\n          result.data.transcription = {\n            chunks:[]\n          }\n        }\n\n        result.data.transcription.chunks.forEach(chunk => {\n          chunk.starttime = toMS(chunk.starttime);\n          chunk.endtime = toMS(chunk.endtime);\n        })\n\n        console.log(result.data);\n\n        this.setState({\n          original: result.data\n        });\n      }.bind(this));\n  }\n\n  handleStateChange(state) {\n    // Copy player state to this component's state\n    this.setState({\n      player: state\n    });\n  }\n\n  saveEdit() {\n    let { original } = this.state;\n    original.transcription.chunks.forEach(chunk => {\n      chunk.starttime = toSrt(chunk.starttime);\n      chunk.endtime = toSrt(chunk.endtime);\n    })\n\n    axios.post('/api/watch/savedit/' + this.props.id + '?apikey=' + this.props.apikey,  original).then(function (result) { \n      // Update last saved display\n      console.log(result)\n    });\n  };\n\n  handlePlay = starttime => {\n    this.player.seek(starttime);\n    this.player.play();\n  };\n\n  skipBack = () => {\n    const { player } = this.player.getState();\n    this.player.seek(player.currentTime - 2);\n  }\n\n  backButton = () => {\n    window.history.back();\n  }\n\n  handleDelete = (starttime, endtime) => {\n\n    // Remove the chunk selected\n    let original = this.state.original;\n    let originalchunks = original.transcription.chunks.filter(c => c.starttime !== starttime);\n\n    // Replace the next chunk's start time with the start time of the chunk deleted\n    let index = this.state.original.transcription.chunks.findIndex(c => c.starttime === endtime);\n    if (index >= 1) originalchunks[--index].starttime = starttime;\n\n    // console.log(original)\n\n    original.transcription.chunks = originalchunks;\n\n    this.setState({ original });\n    this.saveEdit();\n  };\n\n  handleClickOpen = () => {\n    // this.player.pause();\n    // this.setState({ open: true });\n\n    this.handleConfirm();\n  };\n\n  handleClose = value => {\n    this.setState({ open: false });\n    switch (value) {\n      case this.state.options[0]:\n        const { player } = this.player.getState();\n        this.player.seek(player.currentTime - 2);\n        break;\n\n      case this.state.options[1]:\n        this.handleConfirm();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  handleConfirm() {\n    // Record the thumbnail of the current endtime\n    const { currentTime } = this.state.player;\n    let original = this.state.original;\n\n    let newChunk = {\n      endtime: currentTime\n    };\n\n    // Get the index where the current time is larger than the start and smaller than the end\n    let index = this.state.original.transcription.chunks.findIndex(\n      c => currentTime >= c.starttime && currentTime <= c.endtime\n    );\n\n    if (currentTime == 0)\n    {\n      this.setState({\n        erroropen: true\n      });\n      return;\n    }\n\n    if (index >= 1) {\n      // Insert the new chunk into the middle of the list\n      original.transcription.chunks[index].starttime = currentTime;\n      newChunk.starttime = original.transcription.chunks[--index].endtime;\n      original.transcription.chunks.splice(++index, 0, newChunk);\n    } else if (index === 0) {\n      // Insert the new chunk into the front of the list\n      original.transcription.chunks[index].starttime = currentTime;\n      newChunk.starttime = 0;\n      original.transcription.chunks.splice(index, 0, newChunk);\n    } else {\n      // Insert the new chunk into the back of the list\n      const c = original.transcription.chunks.slice(-1)[0];\n      if (c) newChunk.starttime = c.endtime;\n      else newChunk.starttime = 0;\n      original.transcription.chunks.push(newChunk);\n    }\n\n    console.log(original)\n\n    this.setState({ original });\n    this.saveEdit();\n\n  }\n\n  closeError = ()=>{\n    this.setState({\n      erroropen: false\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <br />\n        {/* <Card>\n          <CardContent>\n          \n          </CardContent>\n        </Card>\n        <br /> */}\n        <h2 style={{position:'absolute', width:'15%', right:'1em', top:'3em'}}>Create a breakpoint when someone stops talking</h2>\n        <Container style={{maxWidth:'800px'}}>\n\n        <Player\n          ref={player => {\n            this.player = player;\n          }}\n          >\n          <source src={this.state.source} />\n          <BigPlayButton position=\"center\" />\n          <Shortcut clickable={true} />\n          <ControlBar autoHide={false} />\n        </Player>\n        </Container>\n<br />\n        {/* <div className=\"py-3\"> */}\n          {/* <Button  className=\"m-2\">\n            Set Breakpoint\n          </Button> */}\n\n          <SingleLineGridList\n          style={{width:'100%'}}\n            onPlay={this.handlePlay}\n            onDelete={this.handleDelete}\n            chunks={this.state.original.transcription.chunks}\n          ></SingleLineGridList>\n\n          <PopupDialog\n            open={this.state.open}\n            options={this.state.options}\n            onClose={this.handleClose}\n          />\n\n          <div id=\"output\"></div>\n          {/* <div>{JSON.stringify(this.state.original)}</div> */}\n          <Fab color=\"primary\" onClick={this.skipBack} aria-label=\"left\" style={{position:'absolute', left:'2em', top:'45%'}}>\n            <Replay5 />\n          </Fab>\n          <Fab color=\"primary\" onClick={this.handleClickOpen} aria-label=\"add\" style={{position:'absolute', right:'1em', top:'45%'}}>\n            <AddIcon />\n          </Fab>\n          <Button onClick={this.backButton} style={{position:'absolute', left:'0', top:'1em'}}>\n              <ArrowBack />\n            </Button>\n          <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        open={this.state.erroropen}\n        autoHideDuration={1000}\n        onClose={this.closeError}\n        message=\"Cannot add breakpoint here\"\n      ></Snackbar>\n        </div>\n      // </div>\n    );\n  }\n}\n\nfunction toMS (timestamp) {\n\n  console.log(\"timestamp : \" +timestamp);\n\n  if (!isNaN(timestamp)) {\n    return timestamp\n  }\n\n  const match = timestamp.match(/^(?:(\\d{2,}):)?(\\d{2}):(\\d{2})[,.](\\d{3})$/)\n\n  if (!match) {\n    throw new Error('Invalid SRT or VTT time format: \"' + timestamp + '\"')\n  }\n\n  const hours = match[1] ? parseInt(match[1], 10) * 3600000 : 0\n  const minutes = parseInt(match[2], 10) * 60000\n  const seconds = parseInt(match[3], 10) * 1000\n  const milliseconds = parseInt(match[4], 10)\n\n  return hours + minutes + seconds + milliseconds\n}\n\nfunction toSrt (duration) {\n  console.log(\"duration: \" + duration)\n  let timestamp = duration * 1000;\n  var milliseconds = parseInt((parseFloat(timestamp) % 1000) / 100),\n  seconds = Math.floor((timestamp / 1000) % 60),\n  minutes = Math.floor((timestamp / (1000 * 60)) % 60),\n  hours = Math.floor((timestamp / (1000 * 60 * 60)) % 24);\n\n  \n  hours = (hours < 10) ? \"0\" + hours : hours;\n  minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n  seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n  return hours + \":\" + minutes + \":\" + seconds + \",\" + milliseconds;\n}","import React from \"react\";\nimport \"./App.css\";\nimport VideoPlayer from \"./components/videoPlayer\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n\n  var id = window.location.href.split('/')[5].split('?')[0];\n  var apikey = window.location.href.split('apikey=')[1];\n\n  // var id = 1;\n  // var apikey = \"\";\n\n  return (\n    <main>\n      <Container maxWidth=\"lg\">\n      <CssBaseline />\n      <VideoPlayer src={'/api/watch/getvideo/'+id} id={id} apikey={apikey}></VideoPlayer>\n      {/* <VideoPlayer src={'http://media.w3.org/2010/05/bunny/movie.mp4'} id={id} apikey={apikey}></VideoPlayer> */}\n\n      </Container>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport \"video-react/dist/video-react.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}