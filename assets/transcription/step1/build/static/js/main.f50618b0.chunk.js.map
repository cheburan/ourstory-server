{"version":3,"sources":["components/lineGrid.jsx","components/popupDialog.jsx","components/videoPlayer.jsx","App.js","serviceWorker.js","index.js"],"names":["timeFormatter","time","secs","result","withStyles","root","display","flexWrap","justifyContent","overflow","gridList","transform","titleBar","background","props","classes","chunks","className","GridList","cols","map","chunk","GridListTile","onClick","onPlay","startTime","key","src","img","alt","GridListTileBar","title","endTime","actionIcon","IconButton","aria-label","onDelete","styles","avatar","backgroundColor","blue","color","open","options","Dialog","onClose","aria-labelledby","List","option","ListItem","button","ListItemAvatar","Avatar","index","generateIcon","indexOf","ListItemText","primary","VideoPlayer","context","handlePlay","player","seek","play","handleDelete","original","state","transcription","filter","c","findIndex","setState","saveEdit","handleClickOpen","pause","handleClose","value","getState","currentTime","handleConfirm","source","this","subscribeToStateChange","handleStateChange","bind","serverRequest","axios","get","id","then","console","log","data","post","apikey","newChunk","splice","slice","push","ref","position","clickable","autoHide","Button","JSON","stringify","Component","App","window","location","href","split","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f50618b0.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\nconst styles = {\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\"\n  },\n  gridList: {\n    flexWrap: \"nowrap\",\n    transform: \"translateZ(0)\"\n  },\n  titleBar: {\n    background:\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n  }\n};\n\nfunction SingleLineGridList(props) {\n  const { classes, chunks } = props;\n\n  return (\n    <div className={classes.root}>\n      <GridList className={classes.gridList} cols={3}>\n        {chunks.map(chunk => (\n          <GridListTile\n            onClick={() => props.onPlay(chunk.startTime)}\n            key={chunk.startTime}\n          >\n            <img src={chunk.img} alt={chunk.startTime} />\n            <GridListTileBar\n              title={\n                timeFormatter(chunk.startTime) +\n                \" ~ \" +\n                timeFormatter(chunk.endTime)\n              }\n              classes={{\n                root: classes.titleBar\n              }}\n              actionIcon={\n                <IconButton aria-label={`star ${chunk.startTime}`}>\n                  <CancelIcon\n                    onClick={() =>\n                      props.onDelete(chunk.startTime, chunk.endTime)\n                    }\n                  />\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n\nfunction timeFormatter(time) {\n  var mins = ~~((time % 3600) / 60);\n  var secs = ~~time % 60;\n  var result = \"\";\n  result += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n  result += \"\" + secs;\n  return result;\n}\n\nSingleLineGridList.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SingleLineGridList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { blue } from \"@material-ui/core/colors\";\n\nconst styles = {\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600]\n  }\n};\n\nfunction PopupDialog(props) {\n  const { classes, open, options } = props;\n\n  return (\n    <Dialog\n      onClose={props.onClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <List>\n        {options.map(option => (\n          <ListItem button onClick={() => props.onClose(option)} key={option}>\n            <ListItemAvatar>\n              <Avatar className={classes.avatar}>\n                {generateIcon(options.indexOf(option))}\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={option} />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  );\n}\n\nfunction generateIcon(index) {\n  switch (index) {\n    case 0:\n      return <SkipPreviousIcon></SkipPreviousIcon>;\n    case 1:\n      return <AddCircleIcon></AddCircleIcon>;\n    case 2:\n      return <CancelIcon></CancelIcon>;\n    default:\n      break;\n  }\n}\n\nPopupDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n\nexport default withStyles(styles)(PopupDialog);\n","import React, { Component } from \"react\";\nimport { Player, BigPlayButton, ControlBar, Shortcut } from \"video-react\";\nimport { Button } from \"reactstrap\";\nimport SingleLineGridList from \"./lineGrid\";\nimport PopupDialog from \"./popupDialog\";\nimport axios from 'axios';\n\nexport default class VideoPlayer extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      original: {\n        transcription:{\n          chunks:[]\n        }\n      },\n      source: props.src,\n      open: false,\n      options: [\"Backward 2 Seconds\", \"Add New Breakpoint\", \"Discard Setting\"],\n      \n    };\n  }\n\n  componentDidMount() {\n    // Subscribe state change\n    this.player.subscribeToStateChange(this.handleStateChange.bind(this));\n\n      this.serverRequest = axios.get('/api/watch/edit/'+this.props.id).then(function (result) {\n        // var lastGist = result[0];\n        console.log(result);\n\n        if (!result.data.transcription)\n        {\n          result.data.transcription = {\n            chunks:[]\n          }\n        }\n\n        this.setState({\n          original: result.data\n        });\n      }.bind(this));\n  }\n\n  handleStateChange(state) {\n    // Copy player state to this component's state\n    this.setState({\n      player: state\n    });\n  }\n\n  saveEdit() {\n    axios.post('/api/watch/savedit/' + this.props.id + '?apikey=' + this.props.apikey,  this.state.original).then(function (result) { \n      // Update last saved display\n      console.log(result)\n    });\n  };\n\n  handlePlay = startTime => {\n    this.player.seek(startTime);\n    this.player.play();\n  };\n\n  handleDelete = (startTime, endTime) => {\n    // Remove the chunk selected\n    let original = this.state.original.transcription.chunks.filter(c => c.startTime !== startTime);\n\n    // Replace the next chunk's start time with the start time of the chunk deleted\n    let index = this.state.original.transcription.chunks.findIndex(c => c.startTime === endTime);\n    if (index >= 1) original.transcription.chunks[--index].startTime = startTime;\n\n    this.setState({ original });\n    this.saveEdit();\n  };\n\n  handleClickOpen = () => {\n    this.player.pause();\n    this.setState({ open: true });\n  };\n\n  handleClose = value => {\n    this.setState({ open: false });\n    switch (value) {\n      case this.state.options[0]:\n        const { player } = this.player.getState();\n        this.player.seek(player.currentTime - 2);\n        break;\n\n      case this.state.options[1]:\n        this.handleConfirm();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  handleConfirm() {\n    // Record the thumbnail of the current endtime\n    const { currentTime } = this.state.player;\n    let original = this.state.original;\n\n    let newChunk = {\n      img: \"/transcription/step1/build/static/images/grid-list/default.jpg\",\n      endTime: currentTime\n    };\n\n    // Get the index where the current time is larger than the start and smaller than the end\n    let index = this.state.original.transcription.chunks.findIndex(\n      c => currentTime >= c.startTime && currentTime <= c.endTime\n    );\n\n    if (index >= 1) {\n      // Insert the new chunk into the middle of the list\n      original.transcription.chunks[index].startTime = currentTime;\n      newChunk.startTime = original.transcription.chunks[--index].endTime;\n      original.transcription.chunks.splice(++index, 0, newChunk);\n    } else if (index === 0) {\n      // Insert the new chunk into the front of the list\n      original.transcription.chunks[index].startTime = currentTime;\n      newChunk.startTime = 0;\n      original.transcription.chunks.splice(index, 0, newChunk);\n    } else {\n      // Insert the new chunk into the back of the list\n      const c = original.transcription.chunks.slice(-1)[0];\n      if (c) newChunk.startTime = c.endTime;\n      else newChunk.startTime = 0;\n      original.transcription.chunks.push(newChunk);\n    }\n\n    this.setState({ original });\n    this.saveEdit();\n  }\n\n  render() {\n    return (\n      <div>\n        <Player\n          ref={player => {\n            this.player = player;\n          }}\n        >\n          <source src={this.state.source} />\n          <BigPlayButton position=\"center\" />\n          <Shortcut clickable={true} />\n          <ControlBar autoHide={false} />\n        </Player>\n\n        <div className=\"py-3\">\n          <Button onClick={this.handleClickOpen} className=\"m-2\">\n            Set Breakpoint\n          </Button>\n\n          <SingleLineGridList\n            onPlay={this.handlePlay}\n            onDelete={this.handleDelete}\n            chunks={this.state.original.transcription.chunks}\n          ></SingleLineGridList>\n\n          <PopupDialog\n            open={this.state.open}\n            options={this.state.options}\n            onClose={this.handleClose}\n          />\n\n          <div id=\"output\"></div>\n          <div>{JSON.stringify(this.state.original)}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport VideoPlayer from \"./components/videoPlayer\";\n\nconst sources = {\n  bunnyTrailer: \"http://media.w3.org/2010/05/bunny/trailer.mp4\",\n  bunnyMovie: \"http://media.w3.org/2010/05/bunny/movie.mp4\"\n};\n\n//load object from api:\n\n\nfunction App() {\n\n  // console.log(window.location.href);\n  // console.log(window.location.href.split('/'));\n\n\n\n  var id = window.location.href.split('/')[5].split('?')[0];\n  var apikey = window.location.href.split('apikey=')[1];\n\n\n  // var id = 1;\n\n  return (\n    <main className=\"container mt-3\">\n      <VideoPlayer src={'/api/watch/getvideo/'+id} id={id} apikey={apikey}></VideoPlayer>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"video-react/dist/video-react.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}